#!/bin/bash

usage()
{
  cat <<EOF

$1 command

  Available commands:

  create      Creates one of the following containers
    core      Base Ubuntu container
    buildbox  Base Build container
    buildroot Buildroot container (requires core and buildbox)

    build     
      000     creates build000

    node
      000     creates node000

  destroy
              Destroys buildbox

  build       Builds one of the following packages
    aethos    (requires buildroot)

EOF
}

# x86_64
#arch=`uname -m`

# amd64
arch=`dpkg --print-architecture`

roots="/var/lib/lxc/_roots"

createCore()
{
  if [ ! -d "/var/lib/lxc" ]; then
    echo "/var/lib/lxc must exist.  Has lxc been installed?"
    exit 1
  fi

  if [ -d "/var/lib/lxc/core" ]; then
    echo "Ubuntu core distro is already installed."
  else
    echo "About to do this; needs sudo"
    echo "sudo -E lxc-create -t download -n ubuntu -- --dist ubuntu --release bionic --arch $arch --keyserver hkp://p80.pool.sks-keyservers.net:80"
    echo "Press a key to continue"
    read -n 1 -s
    sudo -E lxc-create -t download -n core -- --dist ubuntu --release bionic --arch $arch --keyserver hkp://p80.pool.sks-keyservers.net:80
  fi

  if [ ! -d $roots ]; then
    sudo mkdir $roots
  fi

  if [ ! -f "$roots/core.squash" ]; then
    sudo mksquashfs "/var/lib/lxc/core/rootfs" "$roots/core.squash"
  else
    echo "core file system has already been created."
  fi
}

createBuildBox()
{
  createCore

  echo "Creating buildbox..."

  if [ -d "/var/lib/lxc/buildbox" ]; then
    echo "BuildBox base container is already installed."
  else
    sudo -E lxc-create -t aethos -n buildbox -- -t buildbox
  fi

  if [ -f "$roots/buildbox.squash" ]; then
    echo "Buildbox file system has already been created"
  else
    sudo lxc-start -n buildbox
    sleep 10
    sudo lxc-attach -n buildbox -- /root/abd/update_buildbox.sh
    sleep 10
    sudo lxc-stop -n buildbox
    sleep 10
    sudo mksquashfs "/var/lib/lxc/buildbox/upper" "$roots/buildbox.squash"
  fi
}

createBuildRoot()
{
  createBuildBox

  if [ -d "/var/lib/lxc/buildroot" ]; then
    echo "buildroot container is already installed."
  else
    sudo -E lxc-create -t aethos -n buildroot -- -t buildroot
  fi
}

createKafka()
{
  createCore

  echo "Creating kafka..."

  if [ -d "/var/lib/lxc/kafka" ]; then
    echo "kafka container is already installed."
  else
    sudo -E lxc-create -t aethos -n kafka -- -t kafka
    sudo lxc-start -n kafka
    sleep 10
    sudo lxc-attach -n kafka -- /root/abd/install_kafka.sh
    sleep 10
    sudo lxc-stop -n kafka
    sleep 10
  fi
}


createFXA()
{
  createCore

  echo "Creating fxa..."

  if [ -d "/var/lib/lxc/fxa" ]; then
    echo "fxa container is already installed."
  else
    sudo -E lxc-create -t aethos -n fxa -- -t fxa
    # sudo lxc-start -n fxa
    # sleep 10
    # sudo lxc-attach -n fxa -- /root/abd/install_fxa.sh
    # sleep 10
    # sudo lxc-stop -n fxa
    # sleep 10
  fi
}

# Verify the command was set.
if [ -z $1 ]; then
  echo Command must be specified.
  usage $(basename $0)
  exit 1
fi

options=$(getopt -o hxrtfm -l help x86_64 rpi tk1 full min -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi

cmd=$1
shift 1

createUsage()
{
  echo "Don't know how to create \"$1\"."
  echo "Usage: "
  echo "    apm create core"
  echo "    apm create buildbox"
  echo "    apm create buildroot"
  echo "    apm create kafka (experimental)"
  echo "    apm create fxa (broken)"
}

doCreate()
{
  case $1 in
    core)       createCore;;
    buildbox)   createBuildBox;;
    buildroot)  createBuildRoot;;
    kafka)      createKafka;;
    fxa)        createFXA;;
    *)          createUsage; exit 1;;
  esac
}

doDestroy()
{
  # For now destroys buildbox

  sudo rm $roots/buildbox.squash
  sudo lxc-destroy buildbox
}

# TODO 
# These are all merged; it should be build, create, publish, fetch, install
# How does upgrade work?
#
# build - build container and build the image
# create - create the package, getting built files as necessary from the build container
# publish - publish the package
# fetch - fetch the published package
# install - install the fetched package
case ${cmd} in
  create)       doCreate $@; exit 0;;
  destroy)      doDestroy; exit 0;;
  *)            echo Bad command && usage $0 && exit 0;;
esac
